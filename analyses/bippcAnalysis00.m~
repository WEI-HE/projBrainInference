
%bippcAnalysis00.m
%
%
% author: steeve laquitaine
%purpose: train and test probabilitic population code model (WJM 2005, NN) 
%         on uniform prior dataset and test on other priors (e.g.,225), 
%         Are the likelihoods systematically biased 
%         toward 225 deg ? bimodal ? If yes the patterns of instances 
%         contain a representation of the prior mean.
%         

%setup
%set folder where you cloned project "projBrainInference"
myrootpath = '~/proj/steeve/';
subject = 's25';
prior = 'priorUnif';
roi = 'V1';

% set train (uniform prior) and test (prior 225) datasets
%move to data path, load Ni instances x Nv voxels instances data to 
%decode from and associated Ni directions which the model is trained 
%to decode. Instances are balanced across directions because prior is 
%uniform thus dataset is not skewed and need no balancing
cd([myrootpath 'projBrainInference/data/' subject '/' prior '/' roi])
load instances
load directions

% ------------------------  TRAIN ------------------------------

%1st step train encoding channels 
%hypothetized sinewave channels (no noise)
%K channels x 360 hypothetical directions space
pp.phi_k = unique(directions);
pp.exponent = 4;
pp = slsimPPchannels(0,pp);
%average channel responses to stimulus directions
%Ni instances x 8 channels
C = pp. f_k_s(:,directions)';
b_train = instances;
W_tr = sltrainPPmodel(b_train,C);

%2nd step : train the model's noise parameters
[rho_tr,tau_tr,sigma_tr,nglogl] = sltrainPPmodelStep2(b_train,directions,pp.f_k_s,W_tr);

%save model
model.rho_tr = rho_tr; model.tau_tr = tau_tr; 
model.sigma_tr = sigma_tr;
model.nglogl = nglogl;
mkdir([myrootpath 'projBrainInference/analyses/bippcAnalysis00/'  subject '/' prior '/' roi])
cd([myrootpath 'projBrainInference/analyses/bippcAnalysis00/'  subject '/' prior '/' roi])
save('model','model')

% ------------------------  TEST ------------------------------

%setup
subject = 's25';
prior = 'prior225';
roi = 'V1';

%% calculate likelihoods in prior 225 test dataset
%we know W_tr, rho_tr, tau_tr, sigma_tr, from training on prior 225 dataset
%load prior 225 dataset for training

%set test dataset (no need to balance here
%training is over)
b_test = d.instances;
directions_test = d.myRandomDir;

%Nv x Nv mu MV gaussian mean 
mu = W_tr*pp.f_k_s;
Nv = size(instances,2);

%Nv x Nv Omega global noise matrix
Om = rho_tr*(tau_tr*tau_tr') + (1-rho_tr)*times(eye(Nv,Nv),tau_tr*tau_tr')+(sigma_tr^2)*(W_tr*W_tr');
[~,e] = cholcov(Om);
if e~=0
    fprintf('%s \n','(slsimvoxppdec) Covariance matrix Omega is not symmetric, positive definite')
    dbstack
    keyboard    
end
if det(Om)==0
    fprintf('%s \n','(slsimvoxppdec) Covariance matrix Omega singular')
    dbstack 
    keyboard   
end

%likelihood probability distribution
for si = 1 : 360
    pb_si(:,si) = mvnpdf(b_test,mu(:,si)',Om);
end
pbgivs = bsxfun(@rdivide,pb_si,sum(pb_si,2));

%% plot average decoded llhs by directions
s_disp = unique(directions_test);
figure('color','w');
cl = linspecer(length(s_disp));
for i = 1 : length(s_disp)
    %posterior with sem over direction instance repeats
    errorarea(pbgivs(directions_test == s_disp(i),:)','k',cl(i,:))
    %displayed directions
    nanmean(pbgivs(directions_test == s_disp(i),:))
    hold on; plot([s_disp(i) s_disp(i)],...
        [min(nanmean(pbgivs(directions_test == s_disp(i),:))) max(nanmean(pbgivs(directions_test == s_disp(i),:)))],'color',cl(i,:),...
        'linestyle',':','linewidth',2)
end
box off
xlabel('Hypothetical motion directions (deg)')
ylabel('Likelihood (probability)')
title({'Average LLHs decoded by ppc from V1 bold patterns by directions (colors)',...
    '(area is sem over directions repeats)',...
    'Trained on p225 (balanced by dir) and tested on p135',...
    ['rho:' num2str(rho_tr) ' - sigma:' num2str(sigma_tr) ' - mean(tau):' num2str(mean(tau_tr))]})
xlim([0 360])


